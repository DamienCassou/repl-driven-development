// C-x C-j now evaluates arbitrary JavaScript code ♥‿♥
// (repl-driven-development [C-x C-j] javascript)








































[...Array(40).keys()]








































    .map(x => x % 3 == 0 ? "Fizz" : x)







































    .map(x => x % 3 == 5 ? "Buzz" : x)










































    .map(x => x % 3 == 0 && x % 5 == 0 ? "FizzBuzz" : x)













































































// C-x C-j now evaluates arbitrary JavaScript code, I'd also like docs for JS and Express
 // (repl-driven-development [C-x C-j] "node" :docs "javascript express")

// npm install -g express axios@0.21.1

let app = require('/usr/local/lib/node_modules/express')()























































let server = app.listen(3030)     // 📚

// Now visit http://localhost:3030/
// ... and see “Cannot GET /”
// ... Neat, it works but it does nothing! Importantly it works!
























































// Let's add a route...
let visited = 1
app.get('/hi', (_req, res) => res.send(`Hello × ${visited++}`))

// Now visit:  http://localhost:3030/hi
// Refresh the page a few times 😉

























































// Notice the local values of “visited” has changed, for each refresh
visited






















































// Excellent; let's add an end-point to return info about the user
app.get('/about', (_req, res) => res.send(html()))
























































// Whoops, there's no “html”! So we see an error!
// Let's define that!
let html = _ => "<div style='color:green; background-color:cyan'>" + info() + "</div>"
























































// Whoops, there's no “info”! So we see an error!
// Let's define that!
let info = function() { return { visited, user: process.env.USER, time: new Date() } }
























































// Uh-oh, we see “[object Object]” since we didn't convert the
// JS object into a JSON string, so let's fix that!
html = _ => "<div style='color:green; background-color:cyan'>" + JSON.stringify(info(), null, 3 /* indentation */) + "</div>"
























































// Uh-oh, the output doesn't look good; let's redefine `html` using <pre> tags.
html = _ => `<h1>Welcome, visitor ${visited++}!</h1>
            <pre style='color:green; background-color:cyan'>
               ${ JSON.stringify(info(), null, 3 /* indentation */) }
            </pre>`


























































// 🤩 Notice how we built this end-point from the top-down:
//     🥰 We knew what we wanted, and saw some errors
//        ---on the client side--- then fixed them right here,
//       with no reloading! 🥳























































// Actually, let's get info about a JS cheat sheet repo
var axios = require('axios')
let repo = (await axios
            .get('https://api.github.com/repos/alhassy/JavaScriptCheatSheet')).data
info =  _ => ({ url: repo.html_url,
               description: repo.description,
               stars: repo.watchers,
               forks: repo.forks,
               topics: repo.topics
             })





























































// So cool!

// Eventually, consider closing the server!
server.close()

// Bye!   ᕦ( ᴼ ڡ ᴼ )ᕤ






















































































































/*
(setq frame-title-format "REPL Driven Development with JavaScript:    FizzBuzz    ᕦ( ᴼ ڡ ᴼ )ᕤ
")

M-x goto-address-mode  ;; makes all URLs clickable
 http://localhost:3030/



   (defun doom-modeline-buffer-file-name ()  "⇒ www.alhassy.com/repl-driven-development ⇐")


   (flymake-mode -1)
   (minions-mode 1)
   (flyspell-mode -1)

  (bind-key "M-SPC" (cl-defun my/delete-vertical-space ()
    (interactive)
    (delete-all-space)
    (insert "\n")
    (indent-for-tab-command)))

    Note: If you forget to close the sever, run “lso -i :3030” to find the pid
    then run “kill -9 PROCESS_ID”.


    (setq prettify-symbols-alist '(("=>" . 8658)))
    (prettify-symbols-mode -1)
    (prettify-symbols-mode +1)
*/
